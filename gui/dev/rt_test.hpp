
#pragma once

#ifndef NN_RENDER_GUI_DEV_RT_TEST_HPP
#define NN_RENDER_GUI_DEV_RT_TEST_HPP

#include"../../dev/rt_test.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace nn{

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace render{

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace gui{

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace dev{

///////////////////////////////////////////////////////////////////////////////////////////////////
//rt_test
///////////////////////////////////////////////////////////////////////////////////////////////////

class rt_test : public property_editor
{
public:

	rt_test(render::dev::rt_test& rt_test, string name = "rt_test") : property_editor(std::move(name)), m_rt_test(rt_test)
	{
	}

	void edit() override
	{
		const char* names[] = 
		{
			"default", 
			"normal", 
			"geometry_normal", 
			"tangent", 
			"binormal",
			"uv"
		};

		auto view = m_rt_test.debug_view();
		if(combobox("view", reinterpret_cast<int&>(view), names, sizeof(names) / sizeof(names[0]))){ m_rt_test.set_debug_view(view); }
	}
	
	void serialize(json_file::values_t&)
	{
	}

	void deserialize(const json_file::values_t&)
	{
	}

private:

	render::dev::rt_test& m_rt_test;
};

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace dev

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace gui

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace render

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace nn

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif
