
#pragma once

#ifndef NN_RENDER_CORE_D3D12_GUI_HPP
#define NN_RENDER_CORE_D3D12_GUI_HPP

#include"render_device.hpp"

#include"../gui.hpp"
#include"../render_context.hpp"
#include"../imgui/imgui_impl_dx12.h"
#include"../imgui/imgui_impl_win32.h"

#if defined(_DEBUG) || !defined(NDEBUG)
#pragma comment(lib, "imguid.lib")
#else
#pragma comment(lib, "imgui.lib")
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace nn{

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace render{

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace d3d12{

///////////////////////////////////////////////////////////////////////////////////////////////////
//gui_manager
///////////////////////////////////////////////////////////////////////////////////////////////////

class gui_manager : public iface::gui_manager
{
public:

	//コンストラクタ
	gui_manager(const HWND hwnd);

	//初期化
	void initialize(iface::render_device &device, const texture_format rtv_format, const uint buffer_count) override;

	//終了処理
	void finalize() override;

	//新規フレーム開始
	void new_frame() override;

	//描画
	void render(iface::render_device& device, render_context& context) override;

	//ウィンドウメッセージ処理
	bool wnd_proc(const UINT msg, const WPARAM wp, const LPARAM lp);

private:

	HWND m_hwnd;
};

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namesace d3d12

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace render

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace nn

///////////////////////////////////////////////////////////////////////////////////////////////////

#include"gui/gui_manager-impl.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif
