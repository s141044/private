
///////////////////////////////////////////////////////////////////////////////////////////////////

namespace nn{

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace render{

///////////////////////////////////////////////////////////////////////////////////////////////////
//render_entity
///////////////////////////////////////////////////////////////////////////////////////////////////

//デストラクタ
inline render_entity::~render_entity()
{
	unregister_instance();
}

///////////////////////////////////////////////////////////////////////////////////////////////////

//インスタンス登録
inline void render_entity::register_instance(const uint bindless_instance_count, const uint raytracing_instance_count)
{
	const auto result = gp_raytracing_manager->register_instance(bindless_instance_count, raytracing_instance_count);
	m_bindless_instance_index = result.bindless_instance_index;
	m_raytracing_instance_index = result.raytracing_instance_index;
	gp_raytracing_picker->register_instance(*this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////

//インスタンス登録解除
inline void render_entity::unregister_instance()
{
	if(m_raytracing_instance_index != invalid_instance_index)
	{
		gp_raytracing_picker->unregister_instance(*this);
		gp_raytracing_manager->unregister_instance(m_bindless_instance_index, m_raytracing_instance_index);
		m_bindless_instance_index = invalid_instance_index;
		m_raytracing_instance_index = invalid_instance_index;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace render

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace nn

///////////////////////////////////////////////////////////////////////////////////////////////////
