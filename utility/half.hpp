
#pragma once

#ifndef NN_RENDER_HALF_HPP
#define NN_RENDER_HALF_HPP

#include<limits>
#include<cfloat>
#include<cstdint>

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace nn{

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace render{

///////////////////////////////////////////////////////////////////////////////////////////////////
//half
/*/////////////////////////////////////////////////////////////////////////////////////////////////
符号部(s):  1bit
指数部(e):  5bit
仮数部(m): 10bit
val=(-1)^s*2^(e-15)*1.m

※(e==0x00)&&(m==0) -> 0
※(e==0x00)&&(m!=0) -> (-1)^s*2^(-14)*0.m
※(e==0x1f)&&(m==0) -> (-1)^s*inf
※(e==0x1f)&&(m!=0) -> NAN
/////////////////////////////////////////////////////////////////////////////////////////////////*/

class half
{
public:

	static_assert(
		std::numeric_limits<float>::is_iec559, "float must be the IEC 559 (IEEE 754) format."
	);
	static_assert(
		sizeof(float) == 4, "the sizeo of float must be 4."
	);

	//コンストラクタ
	half() = default;
	half(const float f);

	//キャスト演算子
	explicit operator float() const;

private:

	union UF
	{
		UF(const float f) : f(f){}
		UF(const uint32_t u) : u(u){}
		uint32_t	u;
		float		f;
	};

	uint16_t m_data;
};

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace render

///////////////////////////////////////////////////////////////////////////////////////////////////

} //namespace nn

///////////////////////////////////////////////////////////////////////////////////////////////////

#include"half/half-impl.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif
